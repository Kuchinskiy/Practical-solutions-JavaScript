'use strict';
// console.log('üí©');

const addNameElem = ['PHP', 'Go', 'Phyton', 'MySQL', 'Angular', 'Vue', 'C#'];

// Delegation event.target
const nav = document.querySelector('.js-nav');

nav.addEventListener('click', handleNavClick);

function handleNavClick(evt) {
	evt.preventDefault();
	if (evt.target === evt.currentTarget) {
		return;
	}

	const target = evt.target;
	console.log('evt target', target); // —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–∑–ª–∞, –µ—Å–ª–∏ –Ω–µ '—Å—Å—ã–ª–∫–∞' –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏(–¥–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º nodeName)
	if (target.nodeName !== 'A') {
		return;
	}
	// –í—ã–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–Ω–æ–≥–∏—Ö –≤–µ—à–∞–µ–º –∫–ª–∞—Å—Å –∏–ª–∏ —Å–Ω–∏–º–∞–µ–º
	target.classList.toggle('active');

	// –ü–µ—Ä–µ–¥–∞–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ —Å CSS
	// setActiveLink(target);
}

function setActiveLink(nextActiveLink) {
	const currentActiveLink = nav.querySelector('a.active');

	if (currentActiveLink) {
		currentActiveLink.classList.remove('active');
	}

	nextActiveLink.classList.add('active');
}

// –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
const addBtn = document.querySelector('.js-add-btn');

addBtn.addEventListener('click', onAddBtnClick);

function onAddBtnClick() {
	let positionElem = Math.floor(Math.random() * addNameElem.length);
	let labelContentElem = addNameElem.splice(positionElem, 1);

	const item = document.createElement('li');
	const tagLink = document.createElement('a');

	tagLink.classList.add('btn');
	tagLink.textContent = `${labelContentElem}`;
	item.appendChild(tagLink);

	nav.appendChild(item);
	labelContentElem += 1;
	// [...new Set(labelContentElem)];
}

// =============================================================
/*
--Todos--
*/
// Ultra model DATA (–≥–ª–∞–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
const todos = {
	items: [],
	add(text) {
		const todo = {
			id: Date.now(),
			text,
		};

		this.items.push(todo);

		return todo;
	},
	delete(id) {
		this.items = this.items.filter(item => item.id !== id); // –≤ todo  –æ—Å—Ç–∞—é—Ç—å—Å—è —Ç–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–ª–∏(–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞)
	},
};

const refs = {
	editor: document.querySelector('.js-editor'),
	todoList: document.querySelector('.js-todo-list'),
};

refs.editor.addEventListener('submit', handleEditorSubmit);
refs.todoList.addEventListener('click', handleTodoListClick);
// document.querySelector('input').addEventListener(
// 	'input',
// 	_.debounce(() => {
// 		console.log(
// 			'Input event handler invocation after 300ms of inactivity past burst.',
// 		);
// 	}, 300),
// );

function handleEditorSubmit(evt) {
	evt.preventDefault();
	const form = evt.currentTarget;

	const inputValue = form.elements.text.value;

	// console.log(inputValue); // —Å–º–æ—Ç—Ä–∏–º –≤–≤–µ–¥–µ–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 'input', –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∞–µ–º)

	const todo = todos.add(inputValue);
	const todoMarkup = buildTodoItem(todo);
	appendTodoItem(refs.todoList, todoMarkup);
	// console.log(todos.items); // —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–∞–º –ª–µ–∂–∏—Ç 'todos' [{...}] –∏ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–æ–≤–ª—è—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—Å—è
	// console.log(todoMarkup);

	form.reset(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function buildTodoItem(item) {
	return `
	<li class="todo-list__item" data-id="${item.id}">
				<div class="todo">
					<p class="todo__text">${item.text}</p>
					<div class="todo__actions">
						<button class="button" type="button">Delete</button>
					</div>
				</div>
			</li>
	`;
}

//  –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ --Todos--
function appendTodoItem(parentRef, todoElem) {
	parentRef.insertAdjacentHTML('beforeend', todoElem);
}

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ —É–¥–∞–ª–µ–Ω–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ --Todos--
function handleTodoListClick(evt) {
	if (evt.target.nodeName !== 'BUTTON') {
		return;
	}

	const btn = evt.target;
	const parentLi = btn.closest('.todo-list__item'); // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–∫–∞ –≤ –ª—é–±–æ–π –≤–ª–æ–∂–µ–Ω–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è closest()
	const todoId = Number(parentLi.dataset.id); // –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫ —á–∏—Å–ª—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å(–ù–û, —Ç–∞–∫ –Ω–µ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å)
	// console.log(typeof todoId); // –ø–æ–ª—É—á–∞–µ–º 'id' element(a) - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞(string)

	todos.delete(todoId);
	console.log(todos.items); // —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º —É–∂–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

	parentLi.remove(); // —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
}

// =============================================================
/*
–ö–æ–Ω—Ü–µ–ø—Ü–∏—è Intersection Observer –¥–ª—è —Å–æ–±—ã—Ç–∏—è scroll
*/

const navigation = document.querySelector('.page-nav');

// Call-back function - –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞–µ–º –≤ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞ (Fn_Constructor)
const onEntry = entries => {
	entries.forEach(entry => {
		if (entry.isIntersecting) {
			// console.log(entry.target); // —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ 'root'
			const sectionId = entry.target.getAttribute('id');
			// console.log(sectionId);

			const currentActiveLink = document.querySelector('.page-nav__link--active');

			if (currentActiveLink) {
				currentActiveLink.classList.remove('page-nav__link--active');
			}

			const nextActiveLink = navigation.querySelector(`a[href="#${sectionId}"]`);
			nextActiveLink.classList.add('page-nav__link--active');
		}
	});
};

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞ (Fn_Constructor)
const options = {
	treshold: 0.5
};

// –°–æ–∑–¥–∞–µ–º (Fn_Constructor) –¥–ª—è —Ä–∞–±–æ—Ç—ã Observer(a) –≤ –µ–µ –ø–∞—Ä–º–µ—Ç—Ä—ã –ø—Ä–µ–¥–∞—é—Ç—å—Å—è –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞(callback & options)
const observer = new IntersectionObserver(onEntry,  options);
const sections = document.querySelectorAll('.section');

// –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É—è –∑–∞ –∫–µ–º —Å–ª–µ–¥–∏—Ç—å  Observer(—É) –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –æ–Ω —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–µ–º-—Ç–æ –æ–¥–Ω–∏–º:
sections.forEach(section => {
	observer.observe(section);
});

// =============================================================
/*
–°–æ–∑–¥–∞–µ–º Lazy-load  —Å –ø–æ–º–æ—â—å—é Intersection Observer
*/

const lazyLoad = target => {
	const options = {};

	const io = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				const img = entry.target;
				const imageUrl = img.dataset.lazy;

				img.setAttribute(imageUrl);

				observer.disconnect(); // —Å–Ω–∏–º–∞–µ–º Observer
			}
		});
	}, options);
	io.observe(target);
};

// –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–µ–∫—Ü–∏–∏ –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å Observer
const images = document.querySelectorAll('.section img');

// –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É—è –∑–∞ –∫–µ–º —Å–ª–µ–¥–∏—Ç—å  Observer(—É)
images.forEach(image => {
	lazyLoad(image);
});